{"version":3,"file":"static/js/141.250ddadb.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.jsx","shared/components/FormElements/Input.jsx","shared/components/UIElements/Card.jsx","shared/hooks/form-hook.jsx","shared/util/validators.js","user/pages/Auth.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload(props) {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickHandler = (e) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (e.target.files && e.target.files.length === 1) {\r\n      pickedFile = e.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n    // console.log(e.target);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../../util/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCH\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction Input(props) {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: \"TOUCH\",\r\n      isTouched: false,\r\n    });\r\n  };\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        if={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nfunction useForm(initialInputs, initialFormValidity) {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n}\r\n\r\nexport default useForm;\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useContext, useState } from \"react\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport AuthContext from \"../../shared/context/auth-context\";\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\nimport useHttpClient from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport \"./Auth.css\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nfunction Auth() {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  // const authSubmitHandler = (e) => {\r\n  //   e.preventDefault();\r\n  //   console.log(formState.inputs);\r\n  //   auth.login();\r\n  // };\r\n  const authSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(formState.inputs);\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {\r\n        // console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"User Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter the valid Name\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please Upload an image\"\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter the valid email address\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter the valid password, Atleast 6 characters\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","type","id","ref","style","display","accept","onChange","e","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","_objectSpread","value","val","validate","validators","isTouched","_useReducer","useReducer","initialValue","initialValid","_useReducer2","inputState","dispatch","changeHandler","event","touchHandler","element","placeholder","onBlur","if","rows","htmlFor","label","formReducer","formIsValid","inputId","inputs","_defineProperty","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","test","err","f","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","useForm","email","password","_useForm2","inputHandler","setFormData","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","formData","_responseData","wrap","_context","prev","next","preventDefault","console","log","process","JSON","stringify","sent","login","userId","token","t0","FormData","append","name","image","t1","stop","_x","apply","arguments","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevMode"],"sourceRoot":""}